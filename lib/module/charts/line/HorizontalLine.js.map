{"version":3,"sources":["HorizontalLine.tsx"],"names":["React","Animated","useAnimatedProps","Line","SVGLine","LineChartDimensionsContext","useYAt","AnimatedLine","createAnimatedComponent","LineChartHorizontalLine","displayName","color","lineProps","at","index","offsetY","width","useContext","y","lineAnimatedProps","x1","x2","y1","value","y2"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,IAAmBC,gBAAnB,QAA2C,yBAA3C;AACA,SAASC,IAAI,IAAIC,OAAjB,QAA2C,kBAA3C;AAEA,SAASC,0BAAT,QAA2C,SAA3C;AAEA,SAASC,MAAT,QAAuB,UAAvB;AAEA,MAAMC,YAAY,GAAGN,QAAQ,CAACO,uBAAT,CAAiCJ,OAAjC,CAArB;AA0BAK,uBAAuB,CAACC,WAAxB,GAAsC,yBAAtC;AAEA,OAAO,SAASD,uBAAT,CAAiC;AACtCE,EAAAA,KAAK,GAAG,MAD8B;AAEtCC,EAAAA,SAAS,GAAG,EAF0B;AAGtCC,EAAAA,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAHiC;AAItCC,EAAAA,OAAO,GAAG;AAJ4B,CAAjC,EAKiB;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAYhB,KAAK,CAACiB,UAAN,CAAiBZ,0BAAjB,CAAlB;AACA,QAAMa,CAAC,GAAGZ,MAAM,CAAC;AACfO,IAAAA,EADe;AAEfE,IAAAA;AAFe,GAAD,CAAhB;AAKA,QAAMI,iBAAiB,GAAGjB,gBAAgB,CAAC,OAAO;AAChDkB,IAAAA,EAAE,EAAE,CAD4C;AAEhDC,IAAAA,EAAE,EAAEL,KAF4C;AAGhDM,IAAAA,EAAE,EAAEJ,CAAC,CAACK,KAH0C;AAIhDC,IAAAA,EAAE,EAAEN,CAAC,CAACK;AAJ0C,GAAP,CAAD,CAA1C;AAOA,sBACE,oBAAC,YAAD;AACE,IAAA,aAAa,EAAEJ,iBADjB;AAEE,IAAA,WAAW,EAAE,CAFf;AAGE,IAAA,MAAM,EAAER,KAHV;AAIE,IAAA,eAAe,EAAC;AAJlB,KAKMC,SALN,EADF;AASD","sourcesContent":["import React from 'react';\nimport Animated, { useAnimatedProps } from 'react-native-reanimated';\nimport { Line as SVGLine, LineProps } from 'react-native-svg';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport type { AtPoint } from './types';\nimport { useYAt } from './useYAt';\n\nconst AnimatedLine = Animated.createAnimatedComponent(SVGLine);\n\ntype HorizontalLineProps = {\n  color?: string;\n  lineProps?: Partial<LineProps>;\n  offsetY?: number;\n  /**\n   * (Optional) A pixel value to nudge the line up or down.\n   *\n   * This may be useful to customize the line's position based on the thickness of your cursor or chart path.\n   *\n   * ```tsx\n   * <LineChart.HorizontalLine\n   *   at={{ index: 3 }}\n   * />\n   *\n   * // or\n   *\n   * <LineChart.HorizontalLine\n   *   at={{ value: 320.32}}\n   * />\n   * ```\n   */\n  at?: AtPoint;\n};\n\nLineChartHorizontalLine.displayName = 'LineChartHorizontalLine';\n\nexport function LineChartHorizontalLine({\n  color = 'gray',\n  lineProps = {},\n  at = { index: 0 },\n  offsetY = 0,\n}: HorizontalLineProps) {\n  const { width } = React.useContext(LineChartDimensionsContext);\n  const y = useYAt({\n    at,\n    offsetY,\n  });\n\n  const lineAnimatedProps = useAnimatedProps(() => ({\n    x1: 0,\n    x2: width,\n    y1: y.value,\n    y2: y.value,\n  }));\n\n  return (\n    <AnimatedLine\n      animatedProps={lineAnimatedProps}\n      strokeWidth={2}\n      stroke={color}\n      strokeDasharray=\"3 3\"\n      {...lineProps}\n    />\n  );\n}\n"]}