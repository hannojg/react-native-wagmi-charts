{"version":3,"sources":["useYAt.tsx"],"names":["React","useLineChart","LineChartDimensionsContext","getYForX","useDerivedValue","withTiming","useYAt","at","offsetY","pointWidth","parsedPath","height","gutter","useContext","yDomain","index","yForX","offsetTop","max","value","percentageOffsetTop","min","heightBetweenGutters","offsetTopPixels"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,0BAAT,QAA2C,SAA3C;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,yBAA5C;AAOA,OAAO,SAASC,MAAT,CAAgB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,OAAO,GAAG;AAAhB,CAAhB,EAAkD;AACvD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA,MAA1B;AAAkCC,IAAAA;AAAlC,MAA6CZ,KAAK,CAACa,UAAN,CACjDX,0BADiD,CAAnD;AAGA,QAAM;AAAEY,IAAAA;AAAF,MAAcb,YAAY,EAAhC;AAEA,SAAOG,eAAe,CAAC,MAAM;AAC3B,QAAI,OAAOG,EAAP,KAAc,QAAd,IAA0BA,EAAE,CAACQ,KAAH,IAAY,IAA1C,EAAgD;AAC9C,YAAMA,KAAK,GAAG,OAAOR,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BA,EAAE,CAACQ,KAA/C;AACA,YAAMC,KAAK,GAAGb,QAAQ,CAACO,UAAD,EAAaD,UAAU,GAAGM,KAA1B,CAAR,IAA4C,CAA1D;AACA,aAAOV,UAAU,CAACW,KAAK,GAAGR,OAAT,CAAjB;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI,UAAMS,SAAS,GAAGH,OAAO,CAACI,GAAR,GAAcX,EAAE,CAACY,KAAnC;AACA,UAAMC,mBAAmB,GAAGH,SAAS,IAAIH,OAAO,CAACI,GAAR,GAAcJ,OAAO,CAACO,GAA1B,CAArC;AAEA,UAAMC,oBAAoB,GAAGX,MAAM,GAAGC,MAAM,GAAG,CAA/C;AAEA,UAAMW,eAAe,GAAGX,MAAM,GAAGQ,mBAAmB,GAAGE,oBAAvD;AAEA,WAAOjB,UAAU,CAACkB,eAAe,GAAGf,OAAnB,CAAjB;AACD,GAxBqB,EAwBnB,CAACD,EAAD,EAAKG,UAAL,EAAiBD,UAAjB,EAA6BK,OAA7B,EAAsCH,MAAtC,EAA8CC,MAA9C,EAAsDJ,OAAtD,CAxBmB,CAAtB;AAyBD","sourcesContent":["import React from 'react';\nimport type { AtPoint } from './types';\nimport { useLineChart } from './useLineChart';\nimport { LineChartDimensionsContext } from './Chart';\nimport { getYForX } from 'react-native-redash';\nimport { useDerivedValue, withTiming } from 'react-native-reanimated';\n\nexport type ViewAtProps = {\n  at: AtPoint;\n  offsetY?: number;\n};\n\nexport function useYAt({ at, offsetY = 0 }: ViewAtProps) {\n  const { pointWidth, parsedPath, height, gutter } = React.useContext(\n    LineChartDimensionsContext\n  );\n  const { yDomain } = useLineChart();\n\n  return useDerivedValue(() => {\n    if (typeof at === 'number' || at.index != null) {\n      const index = typeof at === 'number' ? at : at.index;\n      const yForX = getYForX(parsedPath, pointWidth * index) || 0;\n      return withTiming(yForX + offsetY);\n    }\n    /**\n     * <gutter>\n     * | ---------- | <- yDomain.max  |\n     * |            |                 | offsetTop\n     * |            | <- value        |\n     * |            |\n     * |            | <- yDomain.min\n     * <gutter>\n     */\n\n    const offsetTop = yDomain.max - at.value;\n    const percentageOffsetTop = offsetTop / (yDomain.max - yDomain.min);\n\n    const heightBetweenGutters = height - gutter * 2;\n\n    const offsetTopPixels = gutter + percentageOffsetTop * heightBetweenGutters;\n\n    return withTiming(offsetTopPixels + offsetY);\n  }, [at, parsedPath, pointWidth, yDomain, height, gutter, offsetY]);\n}\n"]}