{"version":3,"sources":["useYAt.tsx"],"names":["useYAt","at","offsetY","pointWidth","parsedPath","height","gutter","React","useContext","LineChartDimensionsContext","yDomain","index","yForX","offsetTop","max","value","percentageOffsetTop","min","heightBetweenGutters","offsetTopPixels"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;;;AAOO,SAASA,MAAT,CAAgB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,OAAO,GAAG;AAAhB,CAAhB,EAAkD;AACvD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA,MAA1B;AAAkCC,IAAAA;AAAlC,MAA6CC,eAAMC,UAAN,CACjDC,iCADiD,CAAnD;;AAGA,QAAM;AAAEC,IAAAA;AAAF,MAAc,iCAApB;AAEA,SAAO,4CAAgB,MAAM;AAC3B,QAAI,OAAOT,EAAP,KAAc,QAAd,IAA0BA,EAAE,CAACU,KAAH,IAAY,IAA1C,EAAgD;AAC9C,YAAMA,KAAK,GAAG,OAAOV,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BA,EAAE,CAACU,KAA/C;AACA,YAAMC,KAAK,GAAG,iCAASR,UAAT,EAAqBD,UAAU,GAAGQ,KAAlC,KAA4C,CAA1D;AACA,aAAO,uCAAWC,KAAK,GAAGV,OAAnB,CAAP;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI,UAAMW,SAAS,GAAGH,OAAO,CAACI,GAAR,GAAcb,EAAE,CAACc,KAAnC;AACA,UAAMC,mBAAmB,GAAGH,SAAS,IAAIH,OAAO,CAACI,GAAR,GAAcJ,OAAO,CAACO,GAA1B,CAArC;AAEA,UAAMC,oBAAoB,GAAGb,MAAM,GAAGC,MAAM,GAAG,CAA/C;AAEA,UAAMa,eAAe,GAAGb,MAAM,GAAGU,mBAAmB,GAAGE,oBAAvD;AAEA,WAAO,uCAAWC,eAAe,GAAGjB,OAA7B,CAAP;AACD,GAxBM,EAwBJ,CAACD,EAAD,EAAKG,UAAL,EAAiBD,UAAjB,EAA6BO,OAA7B,EAAsCL,MAAtC,EAA8CC,MAA9C,EAAsDJ,OAAtD,CAxBI,CAAP;AAyBD","sourcesContent":["import React from 'react';\nimport type { AtPoint } from './types';\nimport { useLineChart } from './useLineChart';\nimport { LineChartDimensionsContext } from './Chart';\nimport { getYForX } from 'react-native-redash';\nimport { useDerivedValue, withTiming } from 'react-native-reanimated';\n\nexport type ViewAtProps = {\n  at: AtPoint;\n  offsetY?: number;\n};\n\nexport function useYAt({ at, offsetY = 0 }: ViewAtProps) {\n  const { pointWidth, parsedPath, height, gutter } = React.useContext(\n    LineChartDimensionsContext\n  );\n  const { yDomain } = useLineChart();\n\n  return useDerivedValue(() => {\n    if (typeof at === 'number' || at.index != null) {\n      const index = typeof at === 'number' ? at : at.index;\n      const yForX = getYForX(parsedPath, pointWidth * index) || 0;\n      return withTiming(yForX + offsetY);\n    }\n    /**\n     * <gutter>\n     * | ---------- | <- yDomain.max  |\n     * |            |                 | offsetTop\n     * |            | <- value        |\n     * |            |\n     * |            | <- yDomain.min\n     * <gutter>\n     */\n\n    const offsetTop = yDomain.max - at.value;\n    const percentageOffsetTop = offsetTop / (yDomain.max - yDomain.min);\n\n    const heightBetweenGutters = height - gutter * 2;\n\n    const offsetTopPixels = gutter + percentageOffsetTop * heightBetweenGutters;\n\n    return withTiming(offsetTopPixels + offsetY);\n  }, [at, parsedPath, pointWidth, yDomain, height, gutter, offsetY]);\n}\n"]}